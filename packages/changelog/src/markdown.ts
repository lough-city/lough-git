import { IGitLog, GIT_COMMIT_TYPE } from '@lough/git-operate';
import config from './config';

class GitLogRender {
  private document: Array<string> = [];

  get markdown() {
    return this.document.join('\n');
  }

  createHeader(name: string) {
    this.document.push(
      `# ${name}`,
      '',
      'All notable changes to this project will be documented in this file. Dates are displayed in UTC.',
      'Generated by [`@lough/git-cli`](https://github.com/anciity/lough-git).'
    );
  }

  createVersionMarkdown(version: string, compareUrl: string, time?: string) {
    this.document.push('', '', '', `## [${version}](${compareUrl})`);
    if (time) this.document.push(`> ${time}`);
  }

  createClassifyMarkdown(type: GIT_COMMIT_TYPE) {
    this.document.push('', `### ${config.types[type].section}`);
  }

  createCommitMarkdown(commitList: Array<IGitLog>, repo: string) {
    this.document.push('');

    const commitScopeClassify: Record<string, Array<IGitLog>> = {};
    const commitNotHaveScopeList = [];

    for (const commit of commitList) {
      if (commit.scope) {
        if (commitScopeClassify[commit.scope]) commitScopeClassify[commit.scope].push(commit);
        else commitScopeClassify[commit.scope] = [commit];
      } else commitNotHaveScopeList.push(commit);
    }

    commitNotHaveScopeList.forEach(commit => {
      this.document.push(`- [${commit.abbrevHash}](${repo}/commit/${commit.hash}) ${commit.subject}`);
      if (commit.scope) this.document.push(commit.scope);
      if (commit.body) this.document.push(commit.body);
    });

    for (const commitScope in commitScopeClassify) {
      this.document.push('');
      this.document.push(`#### ${commitScope}`);
      const commitScopeList = commitScopeClassify[commitScope];

      for (const commit of commitScopeList) {
        this.document.push(`- [${commit.abbrevHash}](${repo}/commit/${commit.hash}) ${commit.subject}`);
        if (commit.body) this.document.push(commit.body);
      }
    }
  }

  createFooterMarkdown() {
    this.document.push('', 'end.');
  }
}

export default GitLogRender;
