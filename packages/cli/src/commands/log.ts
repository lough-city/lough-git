import NpmOperate from '@lough/npm-operate';
import GitOperate, { developCommitTypeList, IGitLog, userCommitTypeList } from '@lough/git-operate';
import path from 'path';
import fs from 'fs';

/**
 * 读取 package.json 获取生成所需配置
 *
 * lerna 多包 逻辑
 * 无需区分包路径，lerna 多包也需要分别在各个 package 里面 加入命令 lough-git log
 * 所以直接通过 process.cwd() package.json 拿到相关数据 并且找到属于当前包的 commit log
 * 非 lerna 包无需判断是否是当前包的提交
 */

// log 输出后 将进行
// 判断当前版本 对比 commit tag版本
// CHANGELOG.md

const action = async () => {
  const projectPath = path.join('E:', 'City', 'lough', 'lough-npm');

  const npm = new NpmOperate({ rootPath: projectPath });

  const git = new GitOperate({ rootPath: projectPath });

  // if (!npm.isLernaProject) {
  //  TODO: 按照标签分组

  const tagList = git.log.tag().sort(() => -1);

  const developMarkdown = [
    `# ${npm.readConfig().name}`,
    'All notable changes to this project will be documented in this file. Dates are displayed in UTC.',
    'Generated by [`@lough/git-cli`](https://github.com/anciity/lough-git).'
  ];

  // HEAD 推断当前版本 或者根据传入 归入
  for (let index = 0; index < tagList.length; index++) {
    const fromTag = tagList[index + 1] || '';
    const toTag = tagList[index];

    developMarkdown.push(`## ${toTag}`);

    const commitList = git.log.commit({ filter: { fromTag, toTag } });

    const developCommitList = commitList.filter(commit => developCommitTypeList.includes(commit.type || ''));
    // const userCommitList = commitList.filter(commit => userCommitTypeList.includes(commit.type || ''));

    const map = developCommitList.reduce((map, commit) => {
      if (map[commit.type || '']) map[commit.type || ''].push(commit);
      else map[commit.type || ''] = [commit];
      return map;
    }, {} as Record<string, IGitLog[]>);

    for (const key in map) {
      developMarkdown.push(`### ${key}`);
      const commits = map[key];

      commits.forEach(commit => developMarkdown.push(`【${commit.scope}】: ${commit.subject}`));
    }
  }

  fs.writeFileSync(path.join(process.cwd(), 'CHANGELOG.md'), developMarkdown.join('\n'), 'utf8');

  // 用户日志 开发日志
  // render markdown
  // }

  // for (const packageName of Object.keys(npmOperate.packages)) {
  //   const { dirName, relativeDir } = npmOperate.packages[packageName];

  //   const tags = execa
  //     .commandSync('git tag', { cwd: projectPath })
  //     .stdout.split('\n')
  //     .filter(v => v.includes(packageName));

  //   const { stdout } = execa.commandSync(
  //     `git log --date=iso --format=${JSON.stringify(GIT_LOG_FORMAT_FIELD)}, ${tags[tags.length - 1]}...${
  //       tags[tags.length - 2]
  //     } -- ${relativeDir}/${dirName} `,
  //     {
  //       cwd: projectPath
  //     }
  //   );

  //   const logList: Array<GitLog> = JSON.parse(
  //     `[${stdout
  //       .substring(0, stdout.length - 1)
  //       .replace(/"[^"]*":"[^"]*(\n)[^"]*"/g, ($0, $1) => $0.replace(/\n/g, '\\n'))}]`
  //   );

  //   console.log(packageName, logList);

  //   break;
  // }
};

export default {
  command: 'log',
  description: 'create git commit log.',
  action
};
